DATA_SECTIONS_FLAG=-fdata-sections -Wl,-T,$(LINKER_SCRIPT)
EMIT_RELOCS_FLAG=-Wl,--emit-relocs
DEBUG_FLAG=-g

EQCHECKER_DEFINES= -Dalloca=myalloca -D_FORTIFY_SOURCE=0 -Dexit=myexit -Dabort=myabort
EQCHECKER_NO_BUILTINS=-fno-builtin-printf -fno-builtin-malloc -fno-builtin-abort -fno-builtin-exit -fno-builtin-fscanf -fno-builtin-abs -fno-builtin-acos -fno-builtin-asin -fno-builtin-atan2 -fno-builtin-atan -fno-builtin-calloc -fno-builtin-ceil -fno-builtin-cosh -fno-builtin-cos -fno-builtin-exit -fno-builtin-exp -fno-builtin-fabs -fno-builtin-floor -fno-builtin-fmod -fno-builtin-fprintf -fno-builtin-fputs -fno-builtin-frexp -fno-builtin-fscanf -fno-builtin-isalnum -fno-builtin-isalpha -fno-builtin-iscntrl -fno-builtin-isdigit -fno-builtin-isgraph -fno-builtin-islower -fno-builtin-isprint -fno-builtin-ispunct -fno-builtin-isspace -fno-builtin-isupper -fno-builtin-isxdigit -fno-builtin-tolower -fno-builtin-toupper -fno-builtin-labs -fno-builtin-ldexp -fno-builtin-log10 -fno-builtin-log -fno-builtin-malloc -fno-builtin-memchr -fno-builtin-memcmp -fno-builtin-memcpy -fno-builtin-memset -fno-builtin-modf -fno-builtin-pow -fno-builtin-printf -fno-builtin-putchar -fno-builtin-puts -fno-builtin-scanf -fno-builtin-sinh -fno-builtin-sin -fno-builtin-snprintf -fno-builtin-sprintf -fno-builtin-sqrt -fno-builtin-sscanf -fno-builtin-strcat -fno-builtin-strchr -fno-builtin-strcmp -fno-builtin-strcpy -fno-builtin-strcspn -fno-builtin-strlen -fno-builtin-strncat -fno-builtin-strncmp -fno-builtin-strncpy -fno-builtin-strpbrk -fno-builtin-strrchr -fno-builtin-strspn -fno-builtin-strstr -fno-builtin-tanh -fno-builtin-tan -fno-builtin-vfprintf -fno-builtin-vsprintf -fno-builtin


GCC_EQCHECKER_FLAGS_RUN= -fno-inline -fno-inline-functions -fno-inline-small-functions -fno-indirect-inlining -fno-partial-inlining -fno-inline-functions-called-once -fno-early-inlining -fno-whole-program -fipa-sra -fno-strict-overflow -fno-unit-at-a-time -fno-strict-aliasing -fno-optimize-sibling-calls -fno-stack-protector  --param scev-max-expr-size=0 -fkeep-inline-functions -fwrapv -std=c11 -DTIMING_OUTPUT -fkeep-inline-functions -fno-reorder-blocks -fno-jump-tables -fno-zero-initialized-in-bss $(EQCHECKER_DEFINES) $(EQCHECKER_NO_BUILTINS) #-fno-peel-loops 
GCC_EQCHECKER_FLAGS_NORUN= #-undef -msoft-float
GCC_EQCHECKER_FLAGS= $(GCC_EQCHECKER_FLAGS_RUN) $(GCC_EQCHECKER_FLAGS_NORUN)

CLANG_COMMON_EQCHECKER_FLAGS_RUN=  -fno-inline -fno-inline-functions -fno-strict-aliasing -fno-optimize-sibling-calls -fno-stack-protector -DTIMING_OUTPUT -fno-reorder-blocks -fwrapv -fno-strict-overflow -fno-unroll-loops -Wno-return-type -fno-zero-initialized-in-bss $(EQCHECKER_DEFINES) $(EQCHECKER_NO_BUILTINS)
CLANG_EQCHECKER_FLAGS_NORUN= #-Xclang -msoft-float -Xclang -no-implicit-float
CLANG_COMMON_EQCHECKER_FLAGS=  $(CLANG_COMMON_EQCHECKER_FLAGS_RUN) $(CLANG_EQCHECKER_FLAGS_NORUN)

CLANG_EQCHECKER_FLAGS= $(CLANG_COMMON_EQCHECKER_FLAGS) -std=c11 -ffreestanding -U__GNUC__
CLANG_CPP_EQCHECKER_FLAGS= $(CLANG_COMMON_EQCHECKER_FLAGS)

GCC_EQCHECKER_FLAGS_CROSSTOOL_RUN= -m32 -fno-inline -fno-inline-functions -fno-unit-at-a-time -fno-strict-aliasing -fno-optimize-sibling-calls -fno-stack-protector -g -fno-inline -fno-inline-functions  -fno-inline-functions-called-once -fno-early-inlining -fno-whole-program -fno-unit-at-a-time -fno-strict-aliasing -fno-optimize-sibling-calls -fno-stack-protector  --param scev-max-expr-size=0 -fkeep-inline-functions -fwrapv -DTIMING_OUTPUT -fkeep-inline-functions -fno-reorder-blocks -fno-jump-tables $(EQCHECKER_DEFINES) $(EQCHECKER_NO_BUILTINS) #-fno-peel-loops   
GCC_EQCHECKER_FLAGS_CROSSTOOL_NORUN= #-undef -msoft-float
GCC_EQCHECKER_FLAGS_CROSSTOOL= $(GCC_EQCHECKER_FLAGS_CROSSTOOL_RUN) $(GCC_EQCHECKER_FLAGS_CROSSTOOL_NORUN)

ICC_COMMON_EQCHECKER_FLAGS= -Gd -ffunction-sections -no-ip -ip-no-inlining -ip-no-pinlining -nolib-inline -fno-optimize-sibling-calls -fargument-alias -unroll0 -no-ansi-alias -falias -no-vec -fno-jump-tables -inline-level=0 -fno-omit-frame-pointer -fno-strict-aliasing -fno-strict-overflow -fwrapv -fabi-version=1 -fno-inline-functions -finline-limit=0 -no-inline-calloc -inline-factor=0 -qno-opt-multi-version-aggressive -fno-stack-protector -no-bss-init $(EQCHECKER_DEFINES) $(EQCHECKER_NO_BUILTINS)
ICC_EQCHECKER_FLAGS= $(ICC_COMMON_EQCHECKER_FLAGS) -std=c11 -ffreestanding -U__GNUC__
ICC_CPP_EQCHECKER_FLAGS= $(ICC_COMMON_EQCHECKER_FLAGS)

CCOMP_EQCHECKER_FLAGS= $(EQCHECKER_DEFINES) $(EMIT_RELOCS_FLAG)

COMMON_FLAGS=$(DEBUG_FLAG) $(EMIT_RELOCS_FLAG) $(DATA_SECTIONS_FLAG)
COPTIMIZE_O0=-O0 $(COMMON_FLAGS)
COPTIMIZE_O0_soft_float=-O0 $(COMMON_FLAGS)
COPTIMIZE_O0_hard_float=-O0 $(COMMON_FLAGS) -mhard-float
COPTIMIZE_O2=-O2 $(COMMON_FLAGS)
COPTIMIZE_O2_soft_float=-O2 $(COMMON_FLAGS)
COPTIMIZE_O2_hard_float=-O2 $(COMMON_FLAGS) -mhard-float
COPTIMIZE_O2U=-O2 -funroll-all-loops $(COMMON_FLAGS)
COPTIMIZE_O2u=-O2 -funroll-loops $(COMMON_FLAGS)
COPTIMIZE_O2ofp=-O2 -fomit-frame-pointer $(COMMON_FLAGS)
COPTIMIZE_O3=-O3 $(COMMON_FLAGS)
COPTIMIZE_O3_soft_float=-O3 $(COMMON_FLAGS)
COPTIMIZE_O3_hard_float=-O3 $(COMMON_FLAGS) -mhard-float
COPTIMIZE_O3U=-O3 -funroll-all-loops $(COMMON_FLAGS)
COPTIMIZE_O3u=-O3 -funroll-loops $(COMMON_FLAGS)
COPTIMIZE_O3ofp=-O3 -fomit-frame-pointer $(COMMON_FLAGS)
COPTIMIZE_CCOMP_O0_soft_float=-O0 -g -fno-fpu -fnone -fvararg-calls -funprototyped -fstruct-return -fno-tailcalls
COPTIMIZE_CCOMP_O2_soft_float=-O2 -g -fno-fpu -fnone -fvararg-calls -funprototyped -fstruct-return -fno-tailcalls
CPORTABILITY_i386=
CPORTABILITY_x64=-DSPEC_CPU_LP64

FC_I386=/usr/bin/gfortran -m32 -static
FC_X64=/usr/bin/gfortran -static

EXTRA_LIBS_soft_float=$(I386_SOFT_FLOAT_LIB)

default=default=gcc-i386-O0=default:
CC		= $(CC_GCC_I386)
CXX		= $(CXX_GCC_I386)
COPTIMIZE	= $(COPTIMIZE_O0) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O0) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)

default=default=gcc-i386-O0-soft-float=default:
CC		= $(CC_GCC_I386)
CXX		= $(CXX_GCC_I386)
COPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)


default=default=gcc-i386-O2=default:
CC		= $(CC_GCC_I386)
CXX		= $(CXX_GCC_I386)
COPTIMIZE	= $(COPTIMIZE_O2) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O2) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)

default=default=gcc-i386-O2U=default:
CC		= $(CC_GCC_I386)
CXX		= $(CXX_GCC_I386)
COPTIMIZE	= $(COPTIMIZE_O2U) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
notes0085=  Baseline C++: g++ -O2
CXXOPTIMIZE	= $(COPTIMIZE_O2U) $(GCC_EQCHECKER_FLAGS)
feedback=0

default=default=gcc-i386-O2u=default:
CC		= $(CC_GCC_I386)
CXX		= $(CXX_GCC_I386)
COPTIMIZE	= $(COPTIMIZE_O2u) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O2u) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)

default=default=gcc-i386-O2ofp=default:
CC		= $(CC_GCC_I386)
CXX		= $(CXX_GCC_I386)
COPTIMIZE	= $(COPTIMIZE_O2ofp)
CXXOPTIMIZE	= $(COPTIMIZE_O2ofp)
FC              = $(FC_I386)
feedback=0

default=default=gcc-i386-O2-soft-float=default:
CC		= $(CC_GCC_I386)
CXX		= $(CXX_GCC_I386)
COPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=gcc-i386-O3-soft-float=default:
CC		= $(CC_GCC_I386)
CXX		= $(CXX_GCC_I386)
COPTIMIZE	= $(COPTIMIZE_O3_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O3_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=gcc-i386-O3=default:
CC		= $(CC_GCC_I386)
CXX		= $(CXX_GCC_I386)
COPTIMIZE	= $(COPTIMIZE_O3)
CXXOPTIMIZE	= $(COPTIMIZE_O3)
FC              = $(FC_I386)

default=default=gcc-i386-O3U=default:
CC		= $(CC_GCC_I386)
CXX		= $(CXX_GCC_I386)
COPTIMIZE	= $(COPTIMIZE_O3U)
CXXOPTIMIZE	= $(COPTIMIZE_O3U)
FC              = $(FC_I386)

default=default=gcc-i386-O3u=default:
notes0080=  Baseline C:   gcc -O3 -funroll-all-loops
CC		= $(CC_GCC_I386)
CXX		= $(CXX_GCC_I386)
COPTIMIZE	= $(COPTIMIZE_O3u)
CXXOPTIMIZE	= $(COPTIMIZE_O3u)
FC              = $(FC_I386)

default=default=gcc-i386-O3ofp=default:
CC		= $(CC_GCC_I386)
CXX		= $(CXX_GCC_I386)
COPTIMIZE	= $(COPTIMIZE_O3ofp)
CXXOPTIMIZE	= $(COPTIMIZE_O3ofp)
FC              = $(FC_I386)
feedback=0

default=default=clang-i386-O0=default:
CC		= $(CC_CLANG_I386)
COPTIMIZE	= $(COPTIMIZE_O0)
CXX		= $(CXX_CLANG_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O0)
CPORTABILITY    = -fpermissive -Wno-return-type
FC              = $(FC_I386)

default=default=clang-i386-O2=default:
CC		= $(CC_CLANG_I386)
COPTIMIZE	= $(COPTIMIZE_O2) $(CLANG_EQCHECKER_FLAGS)
CXX		= $(CXX_CLANG_I386) 
CXXOPTIMIZE	= $(COPTIMIZE_O2) $(CLANG_CPP_EQCHECKER_FLAGS)
CPORTABILITY    = -fpermissive -Wno-return-type
FC              = $(FC_I386)

default=default=clang-i386-O2U=default:
CC		= $(CC_CLANG_I386)
COPTIMIZE	= $(COPTIMIZE_O2U)
CXX		= $(CXX_CLANG_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O2U)
CPORTABILITY    = -fpermissive -Wno-return-type
FC              = $(FC_I386)

default=default=clang-i386-O2u=default:
CC		= $(CC_CLANG_I386)
COPTIMIZE	= $(COPTIMIZE_O2u)
CXX		= $(CXX_CLANG_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O2u)
CPORTABILITY    = -fpermissive -Wno-return-type
FC              = $(FC_I386)

default=default=clang-i386-O2ofp=default:
CC		= $(CC_CLANG_I386)
COPTIMIZE	= $(COPTIMIZE_O2ofp)
CXX		= $(CXX_CLANG_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O2ofp)
CPORTABILITY    = -fpermissive -Wno-return-type
FC              = $(FC_I386)

default=default=clang-i386-O3=default:
CC		= $(CC_CLANG_I386)
COPTIMIZE	= $(COPTIMIZE_O3)
CXX		= $(CXX_CLANG_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O3)
CPORTABILITY    = -fpermissive -Wno-return-type
FC              = $(FC_I386)

default=default=clang-i386-O3U=default:
CC		= $(CC_CLANG_I386)
COPTIMIZE	= $(COPTIMIZE_O3U)
CXX		= $(CXX_CLANG_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O3U)
CPORTABILITY    = -fpermissive -Wno-return-type
FC              = $(FC_I386)

default=default=clang-i386-O3u=default:
CC		= $(CC_CLANG_I386)
COPTIMIZE	= $(COPTIMIZE_O3u)
CXX		= $(CXX_CLANG_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O3u)
CPORTABILITY    = -fpermissive -Wno-return-type
FC              = $(FC_I386)

default=default=clang-i386-O3ofp=default:
CC		= $(CC_CLANG_I386)
COPTIMIZE	= $(COPTIMIZE_O3ofp)
CXX		= $(CXX_CLANG_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O3ofp)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_I386)

default=default=icc-i386-O0-soft-float=default:
CC		= $(CC_ICC_I386)
COPTIMIZE	= $(COPTIMIZE_O0) $(ICC_EQCHECKER_FLAGS)
CXX		= $(CXX_ICC_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O0) $(ICC_CPP_EQCHECKER_FLAGS)
CPORTABILITY    = 
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=icc-i386-O2-soft-float=default:
CC		= $(CC_ICC_I386)
COPTIMIZE	= $(COPTIMIZE_O2) $(ICC_EQCHECKER_FLAGS)
CXX		= $(CXX_ICC_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O2) $(ICC_CPP_EQCHECKER_FLAGS)
CPORTABILITY    = 
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=icc-i386-O3-soft-float=default:
CC		= $(CC_ICC_I386)
COPTIMIZE	= $(COPTIMIZE_O3) $(ICC_EQCHECKER_FLAGS)
CXX		= $(CXX_ICC_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O3) $(ICC_CPP_EQCHECKER_FLAGS)
CPORTABILITY    = 
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=icc-i386-O2U=default:
CC		= $(CC_ICC_I386)
COPTIMIZE	= $(COPTIMIZE_O2U)
CXX		= $(CXX_ICC_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O2U)
CPORTABILITY    = 
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=icc-i386-O2u=default:
CC		= $(CC_ICC_I386)
COPTIMIZE	= $(COPTIMIZE_O2u)
CXX		= $(CXX_ICC_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O2u)
CPORTABILITY    = 
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=icc-i386-O3=default:
CC		= $(CC_ICC_I386)
COPTIMIZE	= $(COPTIMIZE_O3)
CXX		= $(CXX_ICC_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O3)
CPORTABILITY    = 
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=icc-i386-O3U=default:
CC		= $(CC_ICC_I386)
COPTIMIZE	= $(COPTIMIZE_O3U)
CXX		= $(CXX_ICC_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O3U)
CPORTABILITY    = 
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=icc-i386-O3u=default:
CC		= $(CC_ICC_I386)
COPTIMIZE	= $(COPTIMIZE_O3u)
CXX		= $(CXX_ICC_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O3u)
CPORTABILITY    = 
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=icc-i386-O3ofp=default:
CC		= $(CC_ICC_I386)
COPTIMIZE	= $(COPTIMIZE_O3ofp)
CXX		= $(CXX_ICC_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O3ofp)
CPORTABILITY    = 
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)



default=default=crosstool-i386-O0=default:
CC		= $(CC_CROSSTOOL_I386)
COPTIMIZE	= $(COPTIMIZE_O0) $(GCC_EQCHECKER_FLAGS_CROSSTOOL)
CXX		= $(CXX_CROSSTOOL_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O0) $(GCC_EQCHECKER_FLAGS_CROSSTOOL)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)


default=default=crosstool-i386-O2=default:
CC		= $(CC_CROSSTOOL_I386)
COPTIMIZE	= $(COPTIMIZE_O2) $(GCC_EQCHECKER_FLAGS_CROSSTOOL)
CXX		= $(CXX_CROSSTOOL_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O2) $(GCC_EQCHECKER_FLAGS_CROSSTOOL)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=crosstool-i386-O2U=default:
CC		= $(CC_CROSSTOOL_I386)
COPTIMIZE	= $(COPTIMIZE_O2U)
CXX		= $(CXX_CROSSTOOL_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O2U)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=crosstool-i386-O2u=default:
CC		= $(CC_CROSSTOOL_I386)
COPTIMIZE	= $(COPTIMIZE_O2u)
CXX		= $(CXX_CROSSTOOL_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O2u)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_I386)

default=default=crosstool-ppc-O0=default:
CC		= $(CC_CROSSTOOL_PPC)
CXX		= $(CXX_CROSSTOOL_PPC)
COPTIMIZE	= $(COPTIMIZE_O0)
CXXOPTIMIZE	= $(COPTIMIZE_O0)
feedback=0

default=default=crosstool-ppc-O0-hard-float=default:
CC		= $(CC_CROSSTOOL_PPC)
CXX		= $(CXX_CROSSTOOL_PPC)
COPTIMIZE	= $(COPTIMIZE_O0_hard_float)
CXXOPTIMIZE	= $(COPTIMIZE_O0_hard_float)
feedback=0

default=default=crosstool-ppc-O0-soft-float=default:
CC		= $(CC_CROSSTOOL_PPC)
CXX		= $(CXX_CROSSTOOL_PPC)
COPTIMIZE	= $(COPTIMIZE_O0_soft_float)
CXXOPTIMIZE	= $(COPTIMIZE_O0_soft_float)
feedback=0

default=default=crosstool-ppc-O2=default:
notes0080=  Baseline C:   gcc -O2
CC		= $(CC_CROSSTOOL_PPC)
CXX		= $(CXX_CROSSTOOL_PPC)
COPTIMIZE	= $(COPTIMIZE_O2)
notes0085=  Baseline C++: g++ -O2
CXXOPTIMIZE	= $(COPTIMIZE_O2)
feedback=0

default=default=crosstool-ppc-O2-hard-float=default:
notes0080=  Baseline C:   gcc -O2
CC		= $(CC_CROSSTOOL_PPC)
CXX		= $(CXX_CROSSTOOL_PPC)
COPTIMIZE	= $(COPTIMIZE_O2_hard_float)
notes0085=  Baseline C++: g++ -O2
CXXOPTIMIZE	= $(COPTIMIZE_O2_hard_float)
feedback=0

default=default=crosstool-ppc-O2-soft-float=default:
notes0080=  Baseline C:   gcc -O2
CC		= $(CC_CROSSTOOL_PPC)
CXX		= $(CXX_CROSSTOOL_PPC)
COPTIMIZE	= $(COPTIMIZE_O2_soft_float)
CXXOPTIMIZE	= $(COPTIMIZE_O2_soft_float)

default=default=crosstool-ppc-O3=default:
notes0080=  Baseline C:   gcc -O3
CC		= $(CC_CROSSTOOL_PPC)
CXX		= $(CXX_CROSSTOOL_PPC)
COPTIMIZE	= $(COPTIMIZE_O3)
CXXOPTIMIZE	= $(COPTIMIZE_O3)

default=default=crosstool-ppc-O3U=default:
CC		= $(CC_CROSSTOOL_PPC)
CXX		= $(CXX_CROSSTOOL_PPC)
COPTIMIZE	= $(COPTIMIZE_O3U)
CXXOPTIMIZE	= $(COPTIMIZE_O3U)

default=default=crosstool-ppc-O3u=default:
notes0080=  Baseline C:   gcc -O3 -funroll-all-loops
CC		= $(CC_CROSSTOOL_PPC)
CXX		= $(CXX_CROSSTOOL_PPC)
COPTIMIZE	= $(COPTIMIZE_O3u)
CXXOPTIMIZE	= $(COPTIMIZE_O3u)



default=default=gcc-x64-O0=default:
CC		= $(CC_GCC_X64)
CXX		= $(CXX_GCC_X64)
COPTIMIZE	= $(COPTIMIZE_O0)
notes0085=  Baseline C++: g++ $(COPTIMIZE_O0)
CXXOPTIMIZE	= $(COPTIMIZE_O0)
FC              = $(FC_X64)
feedback=0

default=default=gcc-x64-O0-soft-float=default:
CC		= $(CC_GCC_X64)
CXX		= $(CXX_GCC_X64)
COPTIMIZE	= $(COPTIMIZE_O0_soft_float)
notes0085=  Baseline C++: g++ $(COPTIMIZE_O0)
CXXOPTIMIZE	= $(COPTIMIZE_O0_soft_float)
FC              = $(FC_X64)
feedback=0

default=default=gcc-x64-O2=default:
CC		= $(CC_GCC_X64)
CXX		= $(CXX_GCC_X64)
notes0080=  Baseline C:   gcc -O2
COPTIMIZE	= $(COPTIMIZE_O2)
notes0085=  Baseline C++: g++ -O2
CXXOPTIMIZE	= $(COPTIMIZE_O2)
feedback=0
FC              = $(FC_X64)

default=default=gcc-x64-O2U=default:
CC		= $(CC_GCC_X64)
CXX		= $(CXX_GCC_X64)
COPTIMIZE	= $(COPTIMIZE_O2U)
CXXOPTIMIZE	= $(COPTIMIZE_O2U)
FC              = $(FC_X64)

default=default=gcc-x64-O2u=default:
CC		= $(CC_GCC_X64)
CXX		= $(CXX_GCC_X64)
COPTIMIZE	= $(COPTIMIZE_O2u)
CXXOPTIMIZE	= $(COPTIMIZE_O2u)
FC              = $(FC_X64)

default=default=gcc-x64-O2ofp=default:
CC		= $(CC_GCC_X64)
CXX		= $(CXX_GCC_X64)
COPTIMIZE	= $(COPTIMIZE_O2ofp)
CXXOPTIMIZE	= $(COPTIMIZE_O2ofp)
FC              = $(FC_X64)


default=default=gcc-x64-O3=default:
CC		= $(CC_GCC_X64)
CXX		= $(CXX_GCC_X64)
COPTIMIZE	= $(COPTIMIZE_O3)
CXXOPTIMIZE	= $(COPTIMIZE_O3)
FC              = $(FC_X64)

default=default=gcc-x64-O3U=default:
CC		= $(CC_GCC_X64)
CXX		= $(CXX_GCC_X64)
COPTIMIZE	= $(COPTIMIZE_O3U)
CXXOPTIMIZE	= $(COPTIMIZE_O3U)
FC              = $(FC_X64)

default=default=gcc-x64-O3u=default:
CC		= $(CC_GCC_X64)
CXX		= $(CXX_GCC_X64)
COPTIMIZE	= $(COPTIMIZE_O3u)
CXXOPTIMIZE	= $(COPTIMIZE_O3u)
FC              = $(FC_X64)

default=default=gcc-x64-O3ofp=default:
CC		= $(CC_GCC_X64)
CXX		= $(CXX_GCC_X64)
COPTIMIZE	= $(COPTIMIZE_O3ofp)
CXXOPTIMIZE	= $(COPTIMIZE_O3ofp)
FC              = $(FC_X64)

default=default=clang-x64-O0=default:
CC		= $(CC_CLANG_X64)
COPTIMIZE	= $(COPTIMIZE_O0)
CXX		= $(CXX_CLANG_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O0)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)

default=default=clang-x64-O2=default:
CC		= $(CC_CLANG_X64)
COPTIMIZE	= $(COPTIMIZE_O2)
CXX		= $(CXX_CLANG_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O2)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)

default=default=clang-x64-O2U=default:
CC		= $(CC_CLANG_X64)
COPTIMIZE	= $(COPTIMIZE_O2U)
CXX		= $(CXX_CLANG_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O2U)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type

default=default=clang-x64-O2u=default:
CC		= $(CC_CLANG_X64)
COPTIMIZE	= $(COPTIMIZE_O2u)
CXX		= $(CXX_CLANG_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O2u)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)

default=default=clang-x64-O2ofp=default:
CC		= $(CC_CLANG_X64)
COPTIMIZE	= $(COPTIMIZE_O2ofp)
CXX		= $(CXX_CLANG_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O2ofp)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)

default=default=clang-x64-O3=default:
CC		= $(CC_CLANG_X64)
COPTIMIZE	= $(COPTIMIZE_O3)
CXX		= $(CXX_CLANG_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O3)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)

default=default=clang-x64-O3U=default:
CC		= $(CC_CLANG_X64)
COPTIMIZE	= $(COPTIMIZE_O3U)
CXX		= $(CXX_CLANG_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O3U)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)

default=default=clang-x64-O3u=default:
CC		= $(CC_CLANG_X64)
COPTIMIZE	= $(COPTIMIZE_O3u)
CXX		= $(CXX_CLANG_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O3u)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)



default=default=clang-x64-O3ofp=default:
CC		= $(CC_CLANG_X64)
COPTIMIZE	= $(COPTIMIZE_O3ofp)
CXX		= $(CXX_CLANG_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O3ofp)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)


default=default=icc-x64-O0=default:
CC		= $(CC_ICC_X64)
COPTIMIZE	= $(COPTIMIZE_O0)
CXX		= $(CXX_ICC_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O0)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)

default=default=icc-x64-O2=default:
CC		= $(CC_ICC_X64)
COPTIMIZE	= $(COPTIMIZE_O2)
CXX		= $(CXX_ICC_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O2)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)

default=default=icc-x64-O2U=default:
CC		= $(CC_ICC_X64)
COPTIMIZE	= $(COPTIMIZE_O2U)
CXX		= $(CXX_ICC_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O2U)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)

default=default=icc-x64-O2u=default:
CC		= $(CC_ICC_X64)
COPTIMIZE	= $(COPTIMIZE_O2u)
CXX		= $(CXX_ICC_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O2u)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)

default=default=icc-x64-O2ofp=default:
CC		= $(CC_ICC_X64)
COPTIMIZE	= $(COPTIMIZE_O2ofp)
CXX		= $(CXX_ICC_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O2ofp)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)



default=default=icc-x64-O3=default:
CC		= $(CC_ICC_X64)
COPTIMIZE	= $(COPTIMIZE_O3)
CXX		= $(CXX_ICC_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O3)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)

default=default=icc-x64-O3U=default:
CC		= $(CC_ICC_X64)
COPTIMIZE	= $(COPTIMIZE_O3U)
CXX		= $(CXX_ICC_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O3U)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)

default=default=icc-x64-O3u=default:
CC		= $(CC_ICC_X64)
COPTIMIZE	= $(COPTIMIZE_O3u)
CXX		= $(CXX_ICC_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O3u)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)



default=default=icc-x64-O3ofp=default:
CC		= $(CC_ICC_X64)
COPTIMIZE	= $(COPTIMIZE_O3ofp)
CXX		= $(CXX_ICC_X64)
CXXOPTIMIZE	= $(COPTIMIZE_O3ofp)
CPORTABILITY    = -fpermissive -std=gnu89 -Wno-return-type
FC              = $(FC_X64)



default=default=gcc44-i386-O0-soft-float=default:
CC		= $(CC_GCC44_I386)
CXX		= $(CXX_GCC44_I386)
COPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=gcc44-i386-O2-soft-float=default:
CC		= $(CC_GCC44_I386)
CXX		= $(CXX_GCC44_I386)
COPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=gcc44-i386-O3-soft-float=default:
CC		= $(CC_GCC44_I386)
CXX		= $(CXX_GCC44_I386)
COPTIMIZE	= $(COPTIMIZE_O3_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O3_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=gcc46-i386-O0-soft-float=default:
CC		= $(CC_GCC46_I386)
CXX		= $(CXX_GCC46_I386)
COPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=gcc46-i386-O2-soft-float=default:
CC		= $(CC_GCC46_I386)
CXX		= $(CXX_GCC46_I386)
COPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=gcc46-i386-O3-soft-float=default:
CC		= $(CC_GCC46_I386)
CXX		= $(CXX_GCC46_I386)
COPTIMIZE	= $(COPTIMIZE_O3_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O3_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=gcc47-i386-O0-soft-float=default:
CC		= $(CC_GCC47_I386)
CXX		= $(CXX_GCC47_I386)
COPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=gcc47-i386-O2-soft-float=default:
CC		= $(CC_GCC47_I386)
CXX		= $(CXX_GCC47_I386)
COPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=gcc47-i386-O3-soft-float=default:
CC		= $(CC_GCC47_I386)
CXX		= $(CXX_GCC47_I386)
COPTIMIZE	= $(COPTIMIZE_O3_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O3_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)


default=default=gcc48-i386-O0-soft-float=default:
CC		= $(CC_GCC48_I386)
CXX		= $(CXX_GCC48_I386)
COPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=gcc48-i386-O3=default:
CC		= $(CC_GCC48_I386)
CXX		= $(CXX_GCC48_I386)
COPTIMIZE	= $(COPTIMIZE_O3)
CXXOPTIMIZE	= $(COPTIMIZE_O3)
FC              = $(FC_I386)

default=default=gcc48-i386-O2-soft-float=default:
CC		= $(CC_GCC48_I386)
CXX		= $(CXX_GCC48_I386)
COPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=gcc48-i386-O3-soft-float=default:
CC		= $(CC_GCC48_I386)
CXX		= $(CXX_GCC48_I386)
COPTIMIZE	= $(COPTIMIZE_O3_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O3_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)


default=default=gcc61-i386-O0-soft-float=default:
CC		= $(CC_GCC61_I386)
CXX		= $(CXX_GCC61_I386)
COPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=gcc61-i386-O2-soft-float=default:
CC		= $(CC_GCC61_I386)
CXX		= $(CXX_GCC61_I386)
COPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(GCC_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(GCC_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=clang35-i386-O0-soft-float=default:
CC		= $(CC_CLANG35_I386)
CXX		= $(CXX_CLANG35_I386)
COPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(CLANG_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(CLANG_CPP_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=clang35-i386-O2-soft-float=default:
CC		= $(CC_CLANG35_I386)
CXX		= $(CXX_CLANG35_I386)
COPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(CLANG_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(CLANG_CPP_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=clang35-i386-O3-soft-float=default:
CC		= $(CC_CLANG35_I386)
CXX		= $(CXX_CLANG35_I386)
COPTIMIZE	= $(COPTIMIZE_O3_soft_float) $(CLANG_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O3_soft_float) $(CLANG_CPP_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)


default=default=clang36-i386-O0-soft-float=default:
CC		= $(CC_CLANG36_I386)
CXX		= $(CXX_CLANG36_I386)
COPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(CLANG_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O0_soft_float) $(CLANG_CPP_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=clang36-i386-O2-soft-float=default:
CC		= $(CC_CLANG36_I386)
CXX		= $(CXX_CLANG36_I386)
COPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(CLANG_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O2_soft_float) $(CLANG_CPP_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=clang36-i386-O3-soft-float=default:
CC		= $(CC_CLANG36_I386)
CXX		= $(CXX_CLANG36_I386)
COPTIMIZE	= $(COPTIMIZE_O3_soft_float)  $(CLANG_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_O3_soft_float)  $(CLANG_CPP_EQCHECKER_FLAGS)
FC              = $(FC_I386)
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=clang36-i386-O3=default:
CC		= $(CC_CLANG36_I386)
COPTIMIZE	= $(COPTIMIZE_O3)
CXX		= $(CXX_CLANG_I386)
CXXOPTIMIZE	= $(COPTIMIZE_O3)
CPORTABILITY    = -fpermissive -Wno-return-type
FC              = $(FC_I386)

default=default=ccomp-i386-O0-soft-float=default:
CC		= $(CC_CCOMP_I386)
CXX		= 
COPTIMIZE	= $(COPTIMIZE_CCOMP_O0_soft_float) $(CCOMP_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_CCOMP_O0_soft_float) $(CCOMP_EQCHECKER_FLAGS)
FC              = 
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)

default=default=ccomp-i386-O2-soft-float=default:
CC		= $(CC_CCOMP_I386)
CXX		= 
COPTIMIZE	= $(COPTIMIZE_CCOMP_O2_soft_float) $(CCOMP_EQCHECKER_FLAGS)
CXXOPTIMIZE	= $(COPTIMIZE_CCOMP_O2_soft_float) $(CCOMP_EQCHECKER_FLAGS)
FC              = 
EXTRA_LIBS      = $(EXTRA_LIBS_soft_float)
