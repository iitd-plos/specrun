#!/usr/bin/perl -w

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Switch;
use Time::HiRes qw( usleep ualarm gettimeofday tv_interval );
use File::Copy;
use File::Temp qw/ tempfile tempdir :mktemp /;
use POSIX;
use POSIX ":sys_wait_h";
use POSIX qw(setsid);
use POSIX qw(:errno_h :fcntl_h);
use Unix::Mknod qw(:all);
use Fcntl qw(:mode);



my $output_file = "a.out";
my $opt0 = 0;
my $opt2 = 0;
my $static_link = 0;
my $debugging_on = 0;
my $object_file_output = 0;
my $spec_cpu2000 = 0;
my @defines;
my @undefines;
my @includes;
my @warnings;
my @f_options;
my @linklibs;
my @linkdirs;
my @new_argv;
my $std_str;
my $ver = "";

for (my $i = 0; $i <= $#ARGV; $i++) {
  print "argv[$i]=$ARGV[$i]\n";
  if ($ARGV[$i] =~ /^-v(.*)$/) {
    $ver = "-$1";
  } elsif ($ARGV[$i] =~ /^-([fIDUWlL])(.*)$/) {
    my $o = $1;
    my $d = $2;
    push(@new_argv, "-$o");
    push(@new_argv, $d);
  } else {
    push(@new_argv, $ARGV[$i]);
  }
}
@ARGV = @new_argv;
#print "argv: @ARGV\n";

GetOptions(
  "o=s" => \$output_file,
  "O2" => \$opt2,
  "O0" => \$opt0,
  "static" => \$static_link,
  "g" => \$debugging_on,
  "c" => \$object_file_output,
  "I=s" => \@includes,
  "D=s" => \@defines,
  "U=s" => \@undefines,
  "f=s" => \@f_options,
  "W=s" => \@warnings,
  "l=s" => \@linklibs,
  "L=s" => \@linkdirs,
  "std=s" => \$std_str,
);

if ($#ARGV < 0) {
  print "Usage: $0 <c-filename> <options>\n";
  exit(1);
}

my $prog = shift(@ARGV);
my $prog_suffix;
my $compile = 0;
if ($prog =~ /^(.*)\.(c[^\.]*)$/) {
  $prog = $1;
  $prog_suffix = $2;
  $compile = 1;
} elsif ($prog =~ /^(.*)\.o$/) {
  $prog = $1;
  $prog_suffix = "o";
  $compile = 0;
} else {
  print "unknown src-program: $prog. only support .c/.o programs.\n";
  exit(1);
}

my $static_link_str;
if ($static_link) {
  $static_link_str = "-static"
} else {
  $static_link_str = "";
}
my $debug_str;
if ($debugging_on) {
  $debug_str = "-g";
} else {
  $debug_str = "";
}

my $opt_str; # no longer needed, remove it
if ($opt0) {
  $opt_str = "-O0";
} elsif ($opt2) {
  $opt_str = "-O2";
} else {
  $opt_str = "";
}

my $object_file_output_str;
if ($object_file_output) {
  $object_file_output_str = "-c";
} else {
  $object_file_output_str = "";
}

my $define_str = "";
if (defined $std_str) {
  $define_str .= " -std=$std_str";
}
#print "defines = @defines.\n";
foreach my $i (@includes) {
  $define_str .= " -I$i";
}
foreach my $d (@defines) {
  $define_str .= " -D$d";
}
foreach my $d (@undefines) {
  $define_str .= " -U$d";
}
foreach my $w (@warnings) {
  $define_str .= " -W$w";
}
foreach my $f (@f_options) {
  $define_str .= " -f$f";
}

my $link_str = "";
foreach my $l (@linkdirs) {
  $link_str .= " -L$l";
}
foreach my $l (@linklibs) {
  $link_str .= " -l$l";
}

my $clang;
my $gcc;
if ($0 =~ /clang32$/) {
  $clang = "clang$ver";
  $gcc = "gcc";
} elsif ($0 =~ /clang32++/) {
  $clang = "clang++$ver";
  $gcc = "g++";
} else {
  die "Unknown program name: $0\n";
}

# removed 
#-globalopt needed for gzip:lzw-AA
#-barrier  does not exist in 3.4 (TODO make opt_options conditional with clang versions)
#-loop-unswitch --needed for bzip2:hbAssign
#-ipsccp
#-scalar-evolution
#-sccp 
#-loop-unroll 
my $opt_options = "-indvars -lower-expect -targetlibinfo -no-aa -tbaa -basicaa -notti -deadargelim -instcombine -basiccg -prune-eh -inline-cost -inline -functionattrs -sroa -domtree -early-cse -lazy-value-info -jump-threading -correlated-propagation -simplifycfg -instcombine -tailcallelim -reassociate -domtree -loops -loop-simplify -lcssa -loop-rotate -licm -instcombine -loop-idiom -loop-deletion -memdep -gvn -memdep -memcpyopt -instcombine -lazy-value-info -jump-threading -correlated-propagation -domtree -memdep -dse -slp-vectorizer -adce -instcombine -domtree -loop-vectorize -instcombine -strip-dead-prototypes -globaldce -constmerge -domtree -verify";
my $eqchecker_options = "-disable-simplify-libcalls";

if ($compile == 1) {
  psystem("$clang -m32 -emit-llvm -fwrapv -fno-strict-aliasing $debug_str $define_str $prog.$prog_suffix -c -o $prog.bc @ARGV");
  if ($opt2) {
    psystem("opt$ver $opt_options $eqchecker_options $prog.bc -o $prog.opt.bc");
    psystem("llc$ver $eqchecker_options $prog.opt.bc -march=x86 -mcpu=i386 -o $prog.S");
  }
  else {
    psystem("llc$ver $eqchecker_options $prog.bc -march=x86 -mcpu=i386 -o $prog.S");
  }
  psystem("$gcc $prog.S -m32 $debug_str $static_link_str $object_file_output_str -o $output_file");
} else {
  psystem("$gcc -m32 $debug_str $static_link_str $object_file_output_str -o $output_file $prog.$prog_suffix @ARGV $link_str");
}

sub psystem {
  my $command = shift;

  print "$command\n";
  xsystem($command);
}

sub xsystem
{
  my $command = shift;
  my $ret = system($command);
  if (WIFSIGNALED($ret)) {
    #print "\nTried executing $command\nReceived signal ";
    switch (WTERMSIG($ret)) {
      case SIGINT		{ print "SIGINT" }
      case SIGKILL		{ print "SIGKILL" }
      case SIGSEGV		{ print "SIGSEGV" }
      case SIGABRT		{ print "SIGABRT" }
    }
    #print ". exiting\n";
    return(-1);
  }
  if (WIFEXITED($ret)) {
    if (WEXITSTATUS($ret) != 0) {
      #printf("Translation exited with status %d. exiting\n", WEXITSTATUS($ret));
      return(-1);
    }
  }
  return 0;
}
