diff -ur spec_cpu_2000/benchspec/CINT2000/197.parser/src/analyze-linkage.c spec_cpu_2000.patch/benchspec/CINT2000/197.parser/src/analyze-linkage.c
--- spec_cpu_2000/benchspec/CINT2000/197.parser/src/analyze-linkage.c	1998-11-09 20:42:32.000000000 +0530
+++ spec_cpu_2000.patch/benchspec/CINT2000/197.parser/src/analyze-linkage.c	2017-12-17 17:00:35.185977591 +0530
@@ -59,7 +59,7 @@
     int new;    /* the new value of the end to be patched */
 };
 
-static List_o_links * word_links[MAX_SENTENCE];
+static List_o_links * word_links2[MAX_SENTENCE];
   /* a pointer to the list of links out of this word */
 
 void build_digraph(void) {
@@ -75,7 +75,7 @@
     List_o_links * lol;
     N_fat = 0;
     for (i=0; i<N_words; i++) {
-	word_links[i] = NULL;
+	word_links2[i] = NULL;
     }
     for (link=0; link<N_links; link++) {
 	lp = &link_array[link];
@@ -84,8 +84,8 @@
 	    continue;  
 	}
 	lol = (List_o_links *) xalloc(sizeof(List_o_links));
-	lol->next = word_links[lp->l];
-	word_links[lp->l] = lol;
+	lol->next = word_links2[lp->l];
+	word_links2[lp->l] = lol;
 	lol->link = link;
 	lol->word = lp->r;
 	i = lp->lc->priority;
@@ -97,8 +97,8 @@
 	    lol->dir = -1;
 	}
 	lol = (List_o_links *) xalloc(sizeof(List_o_links));
-	lol->next = word_links[lp->r];
-	word_links[lp->r] = lol;
+	lol->next = word_links2[lp->r];
+	word_links2[lp->r] = lol;
 	lol->link = link;
 	lol->word = lp->l;
 	i = lp->rc->priority;
@@ -119,7 +119,7 @@
 int is_CON_word(int w) {
 /* Returns TRUE if there is at least one fat link pointing out of this word. */
     List_o_links * lol;
-    for (lol = word_links[w]; lol!=NULL; lol = lol->next) {
+    for (lol = word_links2[w]; lol!=NULL; lol = lol->next) {
 	if (lol->dir == 1) {
 	    return TRUE;
 	}
@@ -136,7 +136,7 @@
     CON_node * a;
     DIS_list * d, *dx;
     d = NULL;
-    for (lol = word_links[w]; lol!=NULL; lol = lol->next) {
+    for (lol = word_links2[w]; lol!=NULL; lol = lol->next) {
 	if (lol->dir == 1) {
 	    dx = (DIS_list *) xalloc (sizeof (DIS_list));
 	    dx->next = d;
@@ -165,7 +165,7 @@
 	return c;
     }
     dfs_root_word[w] = start_dn->word;
-    for (lol=word_links[w]; lol != NULL; lol = lol->next) {
+    for (lol=word_links2[w]; lol != NULL; lol = lol->next) {
 	if (lol->dir < 0) {  /* a backwards link */
 	    if (dfs_root_word[lol->word] == -1) {
 		structure_violation = TRUE;
@@ -309,7 +309,7 @@
 void fill_patch_array_CON(CON_node * cn, Links_to_patch * ltp) {
     List_o_links * lol;
     Links_to_patch *ltpx;
-    for (lol=word_links[cn->word]; lol != NULL; lol = lol->next) {
+    for (lol=word_links2[cn->word]; lol != NULL; lol = lol->next) {
 	if (lol->dir == 0) {
 	    ltpx = (Links_to_patch *) xalloc(sizeof(Links_to_patch));
 	    ltpx->next = ltp;
@@ -330,7 +330,7 @@
     List_o_links * lol, *lolx;
     int i;
     for (i=0; i<N_words; i++) {
-	for (lol=word_links[i]; lol!=NULL; lol=lolx) {
+	for (lol=word_links2[i]; lol!=NULL; lol=lolx) {
 	    lolx = lol->next;
 	    xfree((void *) lol, sizeof(List_o_links));
 	}
@@ -432,17 +432,17 @@
 /* The following three functions are all for computing the cost of   */
 /* the and lists.                                                    */
 
-static int visited[MAX_SENTENCE];
+static int visited2[MAX_SENTENCE];
 static int and_element_sizes[MAX_SENTENCE];
 static int N_and_elements;
 
 void and_dfs_full(int w) {
 /* scope out this and element */
     List_o_links *lol;
-    if (visited[w]) return;
-    visited[w] = TRUE;
+    if (visited2[w]) return;
+    visited2[w] = TRUE;
     and_element_sizes[N_and_elements]++;
-    for (lol = word_links[w]; lol != NULL; lol = lol->next) {
+    for (lol = word_links2[w]; lol != NULL; lol = lol->next) {
 	if (lol->dir >= 0) {
 	    and_dfs_full(lol->word);
 	}
@@ -452,9 +452,9 @@
 void and_dfs_commas(int w) {
 /* get down the tree past all the commas */
     List_o_links *lol;
-    if (visited[w]) return;
-    visited[w] = TRUE;
-    for (lol = word_links[w]; lol != NULL; lol = lol->next) {
+    if (visited2[w]) return;
+    visited2[w] = TRUE;
+    for (lol = word_links2[w]; lol != NULL; lol = lol->next) {
 	if (lol->dir == 1) {
              /* we only consider UP or DOWN priority links here */
 
@@ -480,10 +480,10 @@
 	if (is_conjunction[w]) {
 	    N_and_elements = 0;
 	    for(i=0; i<N_words; i++) {
-		visited[i] = FALSE;
+		visited2[i] = FALSE;
 		and_element_sizes[i] = 0;
 	    }
-	    if (left_wall_defined) visited[0] = TRUE;  /* this prevents the wall  */
+	    if (left_wall_defined) visited2[0] = TRUE;  /* this prevents the wall  */
                        /* from being erroniously put in an and list count*/
                        /* it also introduces and violation in "walk and run"*/
 	    and_dfs_commas(w);
